@model WebApi.Models.TemporalStatistics.LoggedHoursByDate

@{
    ViewData["Title"] = "LoggedHoursTemporalStatistics";
}


@{
    ViewData["Title"] = "CompletedTasks";
    var dates = Model.LoggedHours.Keys.Select(d => d.ToString("yyyy-MM-dd")).ToArray();
    var values = Model.LoggedHours.Values.ToArray();
}



@{
    await Html.RenderPartialAsync("_viewType");
}

@{
    await Html.RenderPartialAsync("_myTemporalStatistics");
}

<h2>Logged Hours Temporal Statistics</h2>

<div style="width:1100px;height:550px;">
    <canvas id="myChart"></canvas>
</div>

<script>
    var dates = @Html.Raw(Json.Serialize(dates));
    var values = @Html.Raw(Json.Serialize(values));

    var newDates = new Array();

    dates.forEach(function (entry) {
        newDates.push(new Date(entry))

    });
    function newDate(days) {
        return moment().add(days, 'd').toDate();
    }
    function randomScalingFactor(days) {
        return Math.random() * (30 - 2) + 2;
    }

    function newDateString(days) {
        return moment().add(days, 'd').format(timeFormat);
    }
    var timeFormat = 'MM/DD/YYYY HH:mm';

    var color = Chart.helpers.color;
    var ctx = document.getElementById("myChart");
    var myChart = new Chart(this.ctx, {
        type: 'line',
        data: {
            labels: newDates
            ,
            datasets: [{
                label: 'My First dataset',
                fill: false,
                data: values,
            }]
        },
        options: {
            legend: {
                display: false
            },
            scales: {
                xAxes: [{
                    type: 'time',
                    time: {
                        unit: 'day',
                        format: 'timeFormat'
                    }
                }]
            }
        }
    });
</script>